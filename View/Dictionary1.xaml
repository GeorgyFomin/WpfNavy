<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors">


    <Style x:Key="ListViewItemStyle1" TargetType="{x:Type ListViewItem}">
        <!--
            <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0,0,0,1"/>
            <Setter Property="Padding" Value="5,2,5,2"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="2" SnapsToDevicePixels="true">
                        <Border x:Name="InnerBorder" BorderThickness="1" CornerRadius="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle x:Name="UpperHighlight" Fill="#75FFFFFF" Visibility="Collapsed"/>
                                <GridViewRowPresenter Grid.RowSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="#FFCCF0FF"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="Red"/>
                            <Setter Property="BorderBrush" Value="#FF98DDFB"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="#FFCFCFCF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="#FF98DDFB"/>
                        </MultiTrigger>
                        <!--
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="mainBckgr" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF02021B" Offset="0"/>
        <GradientStop Color="#FF082A5B" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="mainBtnColor" Color="#FF11949B"/>
    <Style x:Key="BlackNavy">
        <Setter Property="Control.Background"  Value="{StaticResource mainBckgr}"/>
        <Setter Property="Control.Foreground"  Value="Yellow"/>
    </Style>
    <Style x:Key="Transp">
        <Setter Property="Control.Background"  Value="Transparent"/>
        <Setter Property="Control.Foreground"  Value="Yellow"/>
    </Style>
    <Style x:Key="listViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource ResourceKey=BlackNavy}">
        <Setter Property="BorderBrush" Value="#FF07C75E"/>
    </Style>
    <Style x:Key="headerText" TargetType="TextBlock" BasedOn="{StaticResource ResourceKey=BlackNavy}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="headerBtn" TargetType="Button" BasedOn="{StaticResource ResourceKey=BlackNavy}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true"
                            BorderThickness="0">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="LightGreen"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                            <Setter Property="Foreground" Value="DarkGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>-->
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                            <Setter Property="BorderBrush" TargetName="border" Value="Cyan"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                -->
                            <Setter Property="Background" TargetName="border" Value="Red" />
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="Red"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="3"/>-->
                            <!--{StaticResource Button.MouseOver.Border}-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>-->
                            <Setter Property="BorderBrush" TargetName="border" Value="Green"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="GridViewColumnHeaderControlTemplate1" TargetType="{x:Type GridViewColumnHeader}">
        <Grid SnapsToDevicePixels="True">
            <Border x:Name="HeaderBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1" Background="{TemplateBinding Background}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="7"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="UpperHighlight" Fill="#FFE3F7FF" Visibility="Collapsed"/>
                    <Border Padding="{TemplateBinding Padding}" Grid.RowSpan="2">
                        <ContentPresenter x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" 
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,0,0,1" RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
            </Border>
            <Border x:Name="HeaderHoverBorder" BorderThickness="1,0,1,1" Margin="1,1,0,0"/>
            <Border x:Name="HeaderPressBorder" BorderThickness="1,1,1,0" Margin="1,0,0,1"/>
            <Canvas>
                <Thumb x:Name="PART_HeaderGripper">
                    <Thumb.Style>
                        <Style TargetType="{x:Type Thumb}">
                            <Setter Property="Canvas.Right" Value="-9"/>
                            <Setter Property="Width" Value="18"/>
                            <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFF2F2F2" Offset="0"/>
                                        <GradientStop Color="#FFD5D5D5" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                            <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Thumb.Style>
                </Thumb>
            </Canvas>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" TargetName="HeaderBorder" Value="DarkGreen"/>-->
                <!--<Setter.Value>
                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                <GradientStop Color="#FFBDEDFF" Offset="0"/>
                                <GradientStop Color="#FFB7E7FB" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>-->

                <Setter Property="BorderBrush" TargetName="HeaderHoverBorder" Value="LightGreen"/>
                <Setter Property="BorderThickness" TargetName="HeaderBorder" Value="2"/>
                <!--<Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>
                <Setter Property="Background" TargetName="PART_HeaderGripper" Value="Transparent"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="HeaderBorder" Value="Green" >
                    <!--<Setter.Value>
                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                <GradientStop Color="#FF8DD6F7" Offset="0"/>
                                <GradientStop Color="#FF8AD1F5" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>-->
                </Setter>
                <Setter Property="BorderBrush" TargetName="HeaderHoverBorder" Value="#FF95DAF9"/>
                <Setter Property="BorderBrush" TargetName="HeaderPressBorder" Value="#FF7A9EB1"/>
                <!--<Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>-->
                <!--<Setter Property="Fill" TargetName="UpperHighlight" Value="#FFBCE4F9"/>-->
                <Setter Property="Visibility" TargetName="PART_HeaderGripper" Value="Hidden"/>
                <Setter Property="Margin" TargetName="HeaderContent" Value="1,1,0,0"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--Scroll styling-->
    <Style x:Key="ScrollBarLineUpButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF0000DD" Points="3,15 15,15 9,3"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarLineBottomButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF0000DD" Points="3,3 9,15 15,3"></Polygon>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarLineLeftButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Width="18">
                        <Polygon Fill="#FF0000DD" Points="15,15 15,3 3,9"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarLineRightButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Width="18">
                        <Polygon Fill="#FF0000DD" Points="15,9 3,3 3,15"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="2" Margin="2" Background="#FF0000DD" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>

            <RepeatButton Grid.Row="0" Height="18" Style="{StaticResource ScrollBarLineUpButtonStyle}" Command="ScrollBar.LineUpCommand" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Height="18" Style="{StaticResource ScrollBarLineBottomButtonStyle}"  Command="ScrollBar.LineDownCommand"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <RepeatButton Grid.Column="0" Width="18" Style="{StaticResource ScrollBarLineLeftButtonStyle}" Command="ScrollBar.LineLeftCommand"/>
            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbStyle}" Margin="0,1,0,1">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2" Width="18" Style="{StaticResource ScrollBarLineRightButtonStyle}" Command="ScrollBar.LineRightCommand"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="scrollViewer" TargetType="{x:Type ScrollViewer}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"  Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Padding="0,0,0,3" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}"
                           ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                <ScrollBar.Style>
                    <Style TargetType="ScrollBar">
                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
                    </Style>
                </ScrollBar.Style>
            </ScrollBar>
            <ScrollBar Name="PART_HorizontalScrollBar" Grid.Row="1" Orientation="Horizontal" Padding="0,0,6,0" Value="{TemplateBinding HorizontalOffset}"
                           Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                <ScrollBar.Style>
                    <Style TargetType="ScrollBar">
                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}"/>
                    </Style>
                </ScrollBar.Style>
            </ScrollBar>
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template" Value="{StaticResource scrollViewer}"/>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="18" />
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    <!--Datagrid Styling    -->
    <Style x:Key="CellStyle" TargetType="DataGridCell" BasedOn="{StaticResource ResourceKey=BlackNavy}">
        <Style.Triggers>
            <Trigger Property="IsReadOnly"  Value="True">
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FF0000DD"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Foreground" Value="Black"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EditingCellTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="{StaticResource mainBckgr}"/>
        <Setter Property="Foreground" Value="LightGreen"/>
        <Setter Property="CaretBrush" Value="Cyan"/>
        <Setter Property="SelectionBrush" Value="#ffaa0000"/>
    </Style>
    <Style x:Key="RowStyle" TargetType="DataGridRow" BasedOn="{StaticResource ResourceKey=BlackNavy}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver"  Value="true">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="LightBlue"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="checkBoxStyle" TargetType="CheckBox">
        <Style.Setters>
            <Setter Property="IsChecked" 
                                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.IsChecked}" />
            <!--<Setter Property="SnapsToDevicePixels" Value="true" />-->
            <!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="16" Height="16" Background="{StaticResource mainBckgr}">
                                    <Grid>
                                        <Path Visibility="Collapsed"
                                                                  Width="16"
                                                                  Height="16"
                                                                  x:Name="CheckMark"
                                                                  SnapsToDevicePixels="False"
                                                                  StrokeThickness="2"
                                                                  Data="M 6 6 L 8 14 L 16 2">
                                            <Path.Stroke>
                                                <SolidColorBrush Color="Cyan" />
                                            </Path.Stroke>
                                        </Path>
                                    </Grid>
                                </Border>
                            </BulletDecorator.Bullet>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                                               Storyboard.TargetName="CheckMark">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </BulletDecorator>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

</ResourceDictionary>